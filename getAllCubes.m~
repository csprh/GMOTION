load  UKEQs2016-2018
frameName = '030A_03647_101313-vel.h5';

DScale = 500000;
Latitude0 = Latitude(ML==0); Longitude0 = Longitude(ML==0); thisDate0 = thisDate(ML==0);
Latitude1 = Latitude(ML~=0); Longitude1 = Longitude(ML~=0); thisDate1 = thisDate(ML~=0);

noOfEQs = length(Latitude);
cubeLenL = 0.15/10;
cubeLenD = 0.025/10;
dateDelta = 50;

for ii = 1:noOfEQs
    
    LongitudeS = Longitude(ii);
    LatitudeS = Latitude(ii);
    [centerXProj, centerYProj] = mfwdtran( utmstruct, LatitudeS,LongitudeS);
    DateS = thisDate(ii);
    MLS = ML(ii);
    
    lat0 = LatitudeS-cubeLenL; lat1 = LatitudeS+cubeLenL;
    lon0 = LongitudeS-cubeLenL; lon1 = LongitudeS+cubeLenL;
    
    lonAll = h5read(frameName,'/Longitude');
    latAll = h5read(frameName,'/Latitude');
    
    ind2 = ((latAll>lat0)&(latAll<lat1)&(lonAll>lon0)&(lonAll<lon1));
    
    clear latAll; clear lonAll;
    
    dateAll = h5read(frameName,'/Date');
    
    [a, b] = find(ind2);
    minIndLon = min(a);maxIndLon = max(a);
    
    minIndLat = min(b);maxIndLat = max(b);
    
    startL = [minIndLon minIndLat]; countL = [maxIndLon-minIndLon maxIndLat-minIndLat];
    startLC = [startL 1]; countLC = [countL 170];
    lonThis = h5read(frameName,'/Longitude', startL, countL);
    latThis = h5read(frameName,'/Latitude', startL, countL);
    
    
    cThis = h5read(frameName,'/Cumulative_Displacement_TSmooth',startLC,countLC);
    cThis_100 = cThis(:,:,100);
    thisInd2 = isnan(cThis_100);
    ind2 = ((latThis>lat0)&(latThis<lat1)&(lonThis>lon0)&(lonThis<lon1));
    lon2 = lonThis((~thisInd2)&ind2);
    lat2 = latThis((~thisInd2)&ind2);
    
    allTriplets  = [];
    
    zone = utmzone(thisLat, thisLon);
    utmstruct = defaultm('utm');
    utmstruct.zone = zone;
    utmstruct.geoid = wgs84Ellipsoid; %almanac('earth','grs80','meters');
    utmstruct = defaultm(utmstruct);
            [centerXProj, centerYProj] = mfwdtran( utmstruct, lat2,lon2);
    for ii = 2:170
        
        cThisFrame = cThis(:,:,ii);
        
        thisInd1 = isnan(cThisFrame);
        cThisFrameNoNaN = cThisFrame((~thisInd1)&ind2);
        thisDate = dateAll(ii);
        thisDate = datenum(num2str(thisDate),'yyyymmdd');
        
        
        if (thisDate-DateS)<dateDeltaThresh
            dateChange = thisDate-DateS;

            thisTriplet = [lon2 lat2 (single(dateChange)*ones(size(lon2))) cThisFrameNoNaN];
            allTriplets = [thisTriplet; allTriplets];
        end
    end
end 



    parfor (iii = 1:listLength,nworkers)
    %for iii = 1:listLength
        thisIndex = sortIndex(iii);
        thisLine = thisInput(thisIndex).line;
        thisDate = thisInput(thisIndex).date;
        thisDeltaDate = thisInput(thisIndex).deltadate;
        [~,name,ext] = fileparts(thisLine);
        fileName = [downloadDir name ext];
        
        
        %wget file if it hasn't previously been downloaded
        if exist(fileName, 'file')~=2
            %In windows relative paths to wget will only run if the file
            %directory is local or if the network directory has been
            %mapped. Otherwise just copy wget.exe to the same path as the
            %.m files and modify the xml accordingly.
            wgetString = [wgetStringBase,' -nv', ' -P ',downloadDir, ' ', thisLine];
            disp(['Downloading granule ',num2str(thisIndex),' from ',thisLine,' ...'])
            system(wgetString);
        end
        
        try %Some nc files cannot be read, so we catch those cases
            theseDates{iii} = thisDate;
            theseDeltaDates{iii} = thisDeltaDate;
            [theseImages{iii}, thesePoints, thesePointsProj] = getData(fileName,  thisLat, thisLon, distance1, confgData.resolution, ['/geophysical_data/' subMods{3}], utmstruct);
            thesePointsNew{iii} = [thesePoints ones(size(thesePoints,1),1)*theseDeltaDates{iii}];
            thesePointsProjNew{iii} = [thesePointsProj ones(size(thesePointsProj,1),1)*theseDeltaDates{iii}];
        catch e2
            logErr(e2,['index: ',num2str(index),' mod: ',num2str(modIndex), ' granule: ',num2str(iii)]);
        end
    end
    
    %Get rid of any empty cells
    theseDates = theseDates(~cellfun('isempty', theseImages));
    theseDeltaDates = theseDeltaDates(~cellfun('isempty', theseImages));
    theseImages = theseImages(~cellfun('isempty', theseImages));
    %Build output arrays
    for iii = 1:listLength
        thesePointsOutput = [thesePointsOutput; thesePointsNew{iii}];
        thesePointsProjOutput = [thesePointsProjOutput; thesePointsProjNew{iii}];
    end
    disp(['Time taken to process granules: ', num2str(toc)]);
    
    addToH5(inStruc.h5name, thisMod, theseImages, theseDates, theseDeltaDates, thesePointsOutput, thesePointsProjOutput);

    
